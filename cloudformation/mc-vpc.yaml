AWSTemplateFormatVersion: 2010-09-09
Description: >-
  StackName: McVpc. 1st Step in AWS-provisioning. Creates VPC that has 2 public
  subnets and 2 private subnets in all AZs; 1 NAT-Gateway to enable instances in
  private subnets to access the internet. 
  Pls remove all existing VPCs, Subnets, InternetGateways, etc before running
  this CF
Parameters: {}
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
        - Key: Name
          Value: MC VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
        - Key: Name
          Value: Public-az-A
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
        - Key: Name
          # Value: Public-az-B
          Value: Public-az-C
  # PublicSubnet3:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.3.0/24
  #     AvailabilityZone: !Select 
  #       - '2'
  #       - !GetAZs 
  #         Ref: 'AWS::Region'
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Public
  #       - Key: Name
  #         Value: Public-az-C
  # PublicSubnet4:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.4.0/24
  #     AvailabilityZone: !Select 
  #       - '3'
  #       - !GetAZs 
  #         Ref: 'AWS::Region'
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Public
  #       - Key: Name
  #         Value: Public-az-D
  # PublicSubnet5:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.5.0/24
  #     AvailabilityZone: !Select 
  #       - '4'
  #       - !GetAZs 
  #         Ref: 'AWS::Region'
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Public
  #       - Key: Name
  #         Value: Public-az-E
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
        - Key: Name
          Value: InternetGateway
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
        - Key: Name
          Value: public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  # PublicSubnetRouteTableAssociation3:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnet3
  #     RouteTableId: !Ref PublicRouteTable
  # PublicSubnetRouteTableAssociation4:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnet4
  #     RouteTableId: !Ref PublicRouteTable
  # PublicSubnetRouteTableAssociation5:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnet5
  #     RouteTableId: !Ref PublicRouteTable
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
        - Key: Name
          Value: public
  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '80'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '81'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAclEntryOfficeRange1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '90'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 50.247.82.162/32     # Office IP-Range 1
      PortRange:
        From: '22'
        To: '22'
  InboundSSHPublicNetworkAclEntryOfficeRange2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '91'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 209.136.227.218/32   # Office IP-Range 2
      PortRange:
        From: '22'
        To: '22'
  InboundSSHPublicNetworkAclEntryOfficeRange3:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '92'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 104.11.167.177/32    # Office IP-Range 3
      PortRange:
        From: '22'
        To: '22'
  InboundSSHPublicNetworkAclAwsPublicNetworkRange1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.1.0/24
      PortRange:
        From: '22'
        To: '22'
  InboundSSHPublicNetworkAclAwsPublicNetworkRange2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.2.0/23
      PortRange:
        From: '22'
        To: '22'
  InboundSSHPublicNetworkAclAwsPrivateNetworkRange1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.6.0/23
      PortRange:
        From: '22'
        To: '22'
  InboundSSHPublicNetworkAclAwsPrivateNetworkRange2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.7.0/23
      PortRange:
        From: '22'
        To: '22'
  # InboundSSHPublicNetworkAclAwsPublicNetworkRange3:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: '88'
  #     Protocol: '6'
  #     RuleAction: allow
  #     Egress: 'false'
  #     CidrBlock: 10.0.4.0/23
  #     PortRange:
  #       From: '22'
  #       To: '22'
  # InboundSSHPublicNetworkAclAwsPublicNetworkRange4:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: '87'
  #     Protocol: '6'
  #     RuleAction: allow
  #     Egress: 'false'
  #     CidrBlock: 10.0.3.0/23
  #     PortRange:
  #       From: '22'
  #       To: '22'
  # InboundSSHPublicNetworkAclAwsPublicNetworkRange5:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: '89'
  #     Protocol: '6'
  #     RuleAction: allow
  #     Egress: 'false'
  #     CidrBlock: 10.0.5.0/23
  #     PortRange:
  #       From: '22'
  #       To: '22'

  InboundDynamicPortsPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '110'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  InboundNtpPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '120'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '80'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutboundNtpPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '90'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl
  # PublicSubnetNetworkAclAssociation3:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnet3
  #     NetworkAclId: !Ref PublicNetworkAcl
  # PublicSubnetNetworkAclAssociation4:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnet4
  #     NetworkAclId: !Ref PublicNetworkAcl
  # PublicSubnetNetworkAclAssociation5:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnet5
  #     NetworkAclId: !Ref PublicNetworkAcl
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
        - Key: Name
          Value: Private-az-A
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.7.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
        - Key: Name
          # Value: Private-az-B
          Value: Private-az-C
  # PrivateSubnet3:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.8.0/24
  #     AvailabilityZone: !Select 
  #       - '2'
  #       - !GetAZs 
  #         Ref: 'AWS::Region'
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Private
  #       - Key: Name
  #         Value: Private-az-C
  # PrivateSubnet4:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.9.0/24
  #     AvailabilityZone: !Select 
  #       - '3'
  #       - !GetAZs 
  #         Ref: 'AWS::Region'
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Private
  #       - Key: Name
  #         Value: Private-az-D
  # PrivateSubnet5:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.10.0/24
  #     AvailabilityZone: !Select 
  #       - '4'
  #       - !GetAZs 
  #         Ref: 'AWS::Region'
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Private
  #       - Key: Name
  #         Value: Private-az-E
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
        - Key: Name
          Value: private
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  # PrivateSubnetRouteTableAssociation3:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet3
  #     RouteTableId: !Ref PrivateRouteTable
  # PrivateSubnetRouteTableAssociation4:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet4
  #     RouteTableId: !Ref PrivateRouteTable
  # PrivateSubnetRouteTableAssociation5:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet5
  #     RouteTableId: !Ref PrivateRouteTable
  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
        - Key: Name
          Value: private
  InboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '80'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundNtpPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '90'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '80'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutboundNtpPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '90'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '123'
        To: '123'
  OutboundGitSshPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  PrivateSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl
  # PrivateSubnetNetworkAclAssociation3:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet3
  #     NetworkAclId: !Ref PrivateNetworkAcl
  # PrivateSubnetNetworkAclAssociation4:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet4
  #     NetworkAclId: !Ref PrivateNetworkAcl
  # PrivateSubnetNetworkAclAssociation5:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet5
  #     NetworkAclId: !Ref PrivateNetworkAcl
  EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: GatewayToInternet
    Properties:
      Domain: vpc
  NAT:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  BastionSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Bastion is accessible under VPN
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Bastion
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 50.247.82.162/32      # Office IP-Range 1
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 209.136.227.218/32    # Office IP-Range 2
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 104.11.167.177/32     # Office IP-Range 3
      Tags:
        - Key: Name
          Value: Bastion
  PuppetSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Puppet
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Puppet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSg
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Puppet
  InternalJenkinsVpcSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Jenkins HTTP/HTTPS under VPN and from GitHub, SSH from Bastion
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 50.247.82.162/32      # Office IP-Range 1
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 209.136.227.218/32    # Office IP-Range 2
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 104.11.167.177/32     # Office IP-Range 3
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 50.247.82.162/32      # Office IP-Range 1
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 209.136.227.218/32    # Office IP-Range 2
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 104.11.167.177/32     # Office IP-Range 3
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 192.30.252.0/22       # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 185.199.108.0/22      # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 192.30.252.0/22       # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 185.199.108.0/22      # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSg
      Tags:
        - Key: Name
          Value: Jenkins
  InternalGrafanaVpcSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTP/HTTPS under VPN, SSH from Bastion
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 50.247.82.162/32      # Office IP-Range 1
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 209.136.227.218/32    # Office IP-Range 2
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 104.11.167.177/32     # Office IP-Range 3
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 50.247.82.162/32      # Office IP-Range 1
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 209.136.227.218/32    # Office IP-Range 2
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 104.11.167.177/32     # Office IP-Range 3
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 192.30.252.0/22       # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 185.199.108.0/22      # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 192.30.252.0/22       # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 185.199.108.0/22      # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 192.30.252.0/22       # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 185.199.108.0/22      # GitHub IP-Range
        - IpProtocol: tcp
          FromPort: '8086'
          ToPort: '8086'
          CidrIp: 10.0.0.0/16           # Public and Private IP-Range for Telegraf agent
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSg
      Tags:
        - Key: Name
          Value: Grafana
  InternalRdsVpcSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Postgres accessible from Private Network.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 10.0.6.0/24
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 10.0.7.0/24
        # - IpProtocol: tcp
        #   FromPort: '5432'
        #   ToPort: '5432'
        #   CidrIp: 10.0.8.0/24
        # - IpProtocol: tcp
        #   FromPort: '5432'
        #   ToPort: '5432'
        #   CidrIp: 10.0.9.0/24
        # - IpProtocol: tcp
        #   FromPort: '5432'
        #   ToPort: '5432'
        #   CidrIp: 10.0.10.0/24
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSg
      Tags:
        - Key: Name
          Value: Rds
  # MciApiGatewayElbVpcSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: MciApiGatewayElb
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Name
  #         Value: MciApiGatewayElb
  # MciApiGatewayEc2VpcSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: MciApiGatewayEc2
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         SourceSecurityGroupId: !Ref MciApiGatewayElbVpcSecurityGroup
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         SourceSecurityGroupId: !Ref MciApiGatewayElbVpcSecurityGroup
  #       - IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         SourceSecurityGroupId: !Ref BastionSg
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.6.0/24
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.7.0/24
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.8.0/24
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.9.0/24
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.10.0/24
  #     Tags:
  #       - Key: Name
  #         Value: MciApiGatewayEc2
  # DemandWareApiGatewayElbSg:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: DemandWareApiGatewayElb
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 204.93.128.135/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 217.79.221.6/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 216.75.206.6/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 89.202.105.6/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 204.93.241.6/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 216.52.184.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 89.202.70.254/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 206.191.160.254/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 80.69.5.91/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 94.103.18.107/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 66.151.149.169/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 119.59.72.43/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 70.42.68.126/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 74.201.12.1/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 69.25.94.57/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 217.79.212.8/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 31.186.240.126/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 89.202.113.4/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 72.5.252.91/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 63.251.80.177/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 185.2.167.252/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 67.20.190.196/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 185.50.160.20/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 103.13.71.78/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 66.179.37.28/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 173.209.251.6/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 202.56.12.89/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 103.8.183.116/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 5.175.81.52/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 91.185.162.100/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 64.238.216.228/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 212.84.40.84/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 63.251.197.227/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 216.245.185.36/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 173.252.170.164/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 183.177.59.198/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 88.84.129.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 64.95.131.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 75.98.80.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 66.45.31.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 88.80.176.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 173.209.234.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 65.38.117.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 66.179.54.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 67.202.255.131/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 62.209.42.3/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 136.147.208.8/32
  #     Tags:
  #       - Key: Name
  #         Value: DemandWareApiGatewayElb
  # DemandWareApiGatewayEc2Sg:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: DemandWareApiGatewayEC2
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         SourceSecurityGroupId: !Ref DemandWareApiGatewayElbSg
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         SourceSecurityGroupId: !Ref DemandWareApiGatewayElbSg
  #       - IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         SourceSecurityGroupId: !Ref BastionSg
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.6.0/24
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.7.0/24
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.8.0/24
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.9.0/24
  #       - IpProtocol: tcp
  #         FromPort: '3333'
  #         ToPort: '3333'
  #         CidrIp: 10.0.10.0/24
  #     Tags:
  #       - Key: Name
  #         Value: DemandWareApiGatewayEc2
  # ApplePayElbSg:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: ApplePayElb
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.6.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.7.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.8.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.9.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.10.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.6.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.7.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.8.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.9.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.10.0/24
  #     SecurityGroupEgress:
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.78.7/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.78.71/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.78.135/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.78.199/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.79.12/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.128.7/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.128.71/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.128.135/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.128.199/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.129.12/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.78.9/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.78.73/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.78.137/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.78.201/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.79.13/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.128.9/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.128.73/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.128.137/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.128.201/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.141.129.13/32
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 17.171.85.7/32
  #       - IpProtocol: udp
  #         FromPort: '123'
  #         ToPort: '123'
  #         CidrIp: 0.0.0.0/0             # NTP-sync
  #     Tags:
  #       - Key: Name
  #         Value: ApplePayElb
  # ApplePayEc2Sg:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: ApplePayEc2
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         SourceSecurityGroupId: !Ref ApplePayElbSg
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         SourceSecurityGroupId: !Ref ApplePayElbSg
  #       - IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         SourceSecurityGroupId: !Ref BastionSg
  #     Tags:
  #       - Key: Name
  #         Value: ApplePayEc2
  # CyberSourceElbSg:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: CyberSourceElb
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.6.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.7.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.8.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.9.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.10.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.6.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.7.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.8.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.9.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.10.0/24
  #     Tags:
  #       - Key: Name
  #         Value: CyberSourceElb
  # CyberSourceEc2Sg:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: CyberSourceEc2
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         SourceSecurityGroupId: !Ref CyberSourceElbSg
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         SourceSecurityGroupId: !Ref CyberSourceElbSg
  #       - IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         SourceSecurityGroupId: !Ref BastionSg
  #     Tags:
  #       - Key: Name
  #         Value: CyberSourceEc2
  # DemandWareElbSg:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: DemandWareElb
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.6.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.7.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.8.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.9.0/24
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 10.0.10.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.6.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.7.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.8.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.9.0/24
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 10.0.10.0/24
  #     Tags:
  #       - Key: Name
  #         Value: DemandWareElb
  # DemandWareEc2Sg:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: DemandWareEc2
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         SourceSecurityGroupId: !Ref CyberSourceElbSg
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         SourceSecurityGroupId: !Ref CyberSourceElbSg
  #       - IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         SourceSecurityGroupId: !Ref BastionSg
  #     Tags:
  #       - Key: Name
  #         Value: DemandWareEc2
  RedisSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RedisSg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          CidrIp: 10.0.6.0/24
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          CidrIp: 10.0.7.0/24
        # - IpProtocol: tcp
        #   FromPort: '6379'
        #   ToPort: '6379'
        #   CidrIp: 10.0.8.0/24
        # - IpProtocol: tcp
        #   FromPort: '6379'
        #   ToPort: '6379'
        #   CidrIp: 10.0.9.0/24
        # - IpProtocol: tcp
        #   FromPort: '6379'
        #   ToPort: '6379'
        #   CidrIp: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: Redis
  # MciCfTemplates:
  #   Type: 'AWS::S3::Bucket'
  #   Properties:
  #     BucketName: !Sub 'mci-cf-templates-${AWS::AccountId}'
  MciLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'moovcheckout-logs-${AWS::AccountId}'
  LocalDnsHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: mc
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: us-west-1
  # LocalDnsEc2ManagerGroup:
  #   Type: 'AWS::IAM::Group'
  #   Properties:
  #     GroupName: LocalDnsEc2Manager
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
  # IAMPolicyRoute53AddListAutoassignTag:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     PolicyName: Route53AddListAutoassignTag
  #     Roles:
  #       - aws-elasticbeanstalk-ec2-role
  #     Groups:
  #       - !Ref LocalDnsEc2ManagerGroup
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: Stmt1492592612000
  #           Effect: Allow
  #           Action:
  #             - 'route53:ChangeResourceRecordSets'
  #             - 'route53:GetHostedZone'
  #             - 'route53:ListResourceRecordSets'
  #             - 'route53:ListHostedZones'
  #             - 'route53:ListHostedZonesByName'
  #           Resource:
  #             - !Join 
  #               - ''
  #               - - 'arn:aws:route53:::hostedzone/'
  #                 - !Ref LocalDnsHostedZone
  #         - Action:
  #             - 'route53:ListHostedZones'
  #           Effect: Allow
  #           Resource:
  #             - '*'
  #         - Effect: Allow
  #           Action:
  #             - 'tag:addResourceTags'
  #             - 'tag:removeResourceTags'
  #             - 'tag:tagResources'
  #             - 'tag:untagResources'
  #             - 'ec2:CreateTags'
  #             - 'ec2:DeleteTags'
  #             - 'ec2:DescribeTags'
  #           Resource: '*'
  # IAMPolicySSHAccess:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     Roles:
  #       - aws-elasticbeanstalk-ec2-role
  #     PolicyName: SshKeyImporter
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - 'iam:ListUsers'
  #           Resource:
  #             - '*'
  #         - Effect: Allow
  #           Action:
  #             - 'iam:ListSSHPublicKeys'
  #             - 'iam:GetSSHPublicKey'
  #           Resource:
  #             - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  # IAMPolicyCloudWatchAccess:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     Roles:
  #       - aws-elasticbeanstalk-ec2-role
  #     PolicyName: CloudWatchPublisher
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - 'logs:CreateLogGroup'
  #             - 'logs:CreateLogStream'
  #             - 'logs:GetLogEvents'
  #             - 'logs:PutLogEvents'
  #             - 'logs:DescribeLogGroups'
  #             - 'logs:DescribeLogStreams'
  #             - 'logs:PutRetentionPolicy'
  #           Resource:
  #             - 'arn:aws:logs:us-east-1:*:*'
  # IAMPolicyCloudWatchLogGroupCreator:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     Roles:
  #       - aws-elasticbeanstalk-ec2-role
  #     PolicyName: CloudWatchLogLogGroupCreator
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - 'logs:PutLogEvents'
  #             - 'logs:CreateLogStream'
  #           Resource:
  #             - 'arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*'
  # IAMPolicyAutoScalingLifecycleAction:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     Roles:
  #       - aws-elasticbeanstalk-ec2-role
  #     PolicyName: AutoScalingLifecycleAction
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - 'autoscaling:CompleteLifecycleAction'
  #             - 'autoscaling:Describe*'
  #             - 'autoscaling:PutNotificationConfiguration'
  #             - 'sns:Publish'
  #             - 'sns:ListTopics'
  #           Resource:
  #             - '*'
Outputs:
  VpcId:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
  LocalDnsHostedZoneId:
    Description: LocalDnsHostedZone
    Value: !Ref LocalDnsHostedZone
    Export:
      Name: !Sub '${AWS::StackName}-LocalDnsHostedZoneId'
  PublicSubnets:
    Description: Public subnet
    Value: !Join 
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        # - !Ref PublicSubnet3
        # - !Ref PublicSubnet4
        # - !Ref PublicSubnet5
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'
  PrivateSubnets:
    Description: Private subnet
    Value: !Join 
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        # - !Ref PrivateSubnet3
        # - !Ref PrivateSubnet4
        # - !Ref PrivateSubnet5
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'
  PrivateSubnetA:
    Description: Private subnet A
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetA'
  # PrivateSubnetB:
  PrivateSubnetC:
    # Description: Private subnet B
    Description: Private subnet C
    Value: !Ref PrivateSubnet2
    Export:
      # Name: !Sub '${AWS::StackName}-PrivateSubnetB'
      Name: !Sub '${AWS::StackName}-PrivateSubnetC'
  # PrivateSubnetC:
  #   Description: Private subnet C
  #   Value: !Ref PrivateSubnet3
  #   Export:
  #     Name: !Sub '${AWS::StackName}-PrivateSubnetC'
  # PrivateSubnetD:
  #   Description: Private subnet D
  #   Value: !Ref PrivateSubnet4
  #   Export:
  #     Name: !Sub '${AWS::StackName}-PrivateSubnetD'
  # PrivateSubnetE:
  #   Description: Private subnet E
  #   Value: !Ref PrivateSubnet5
  #   Export:
  #     Name: !Sub '${AWS::StackName}-PrivateSubnetE'
  PublicSubnetA:
    Description: Public subnet A
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetA'
  # PublicSubnetB:
  PublicSubnetC:
    # Description: Public subnet B
    Description: Public subnet C
    Value: !Ref PublicSubnet2
    Export:
      # Name: !Sub '${AWS::StackName}-PublicSubnetB'
      Name: !Sub '${AWS::StackName}-PublicSubnetC'
  # PublicSubnetC:
  #   Description: Public subnet C
  #   Value: !Ref PublicSubnet3
  #   Export:
  #     Name: !Sub '${AWS::StackName}-PublicSubnetC'
  # PublicSubnetD:
  #   Description: Public subnet D
  #   Value: !Ref PublicSubnet4
  #   Export:
  #     Name: !Sub '${AWS::StackName}-PublicSubnetD'
  # PublicSubnetE:
  #   Description: Public subnet E
  #   Value: !Ref PublicSubnet5
  #   Export:
  #     Name: !Sub '${AWS::StackName}-PublicSubnetE'
  AZs:
    Description: Availability zones
    Value: !Join 
      - ','
      - - !GetAtt 
          - PrivateSubnet1
          - AvailabilityZone
        - !GetAtt 
          - PrivateSubnet2
          - AvailabilityZone
        # - !GetAtt 
        #   - PrivateSubnet3
        #   - AvailabilityZone
        # - !GetAtt 
        #   - PrivateSubnet4
        #   - AvailabilityZone
        # - !GetAtt 
        #   - PrivateSubnet5
        #   - AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  # InternalSshSecurityGroupId:
  #   Description: Internal ssh security group
  #   Value: !Ref InternalSshSecurityGroup
  #   Export:
  #     Name: !Sub '${AWS::StackName}-InternalSshSecurityGroupId'
  BastionSgId:
    Description: SecurityGroup to access Bastion box over SSH from Internet
    Value: !GetAtt 
      - BastionSg
      - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-BastionSgId'
  InternalRdsVpcSecurityGroupId:
    Description: Internal RDS security group
    Value: !Ref InternalRdsVpcSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-InternalRdsVpcSecurityGroupId'
  InternalJenkinsVpcSecurityGroupId:
    Description: Internal Jenkins security group
    Value: !Ref InternalJenkinsVpcSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-InternalJenkinsVpcSecurityGroupId'
  # MciApiGatewayEc2VpcSecurityGroupId:
  #   Description: MciApiGatewayEc2 security group
  #   Value: !Ref MciApiGatewayEc2VpcSecurityGroup
  #   Export:
  #     Name: !Sub '${AWS::StackName}-MciApiGatewayEc2VpcSecurityGroupId'
  # MciApiGatewayElbVpcSecurityGroupId:
  #   Description: MciApiGatewayElb security group
  #   Value: !Ref MciApiGatewayElbVpcSecurityGroup
  #   Export:
  #     Name: !Sub '${AWS::StackName}-MciApiGatewayElbVpcSecurityGroupId'
  # DemandWareApiGatewayEc2SgId:
  #   Description: MciApiGatewayElb security group
  #   Value: !Ref DemandWareApiGatewayEc2Sg
  #   Export:
  #     Name: !Sub '${AWS::StackName}-DemandWareApiGatewayEc2SgId'
  # DemandWareApiGatewayElbSgId:
  #   Description: MciApiGatewayElb security group
  #   Value: !Ref DemandWareApiGatewayElbSg
  #   Export:
  #     Name: !Sub '${AWS::StackName}-DemandWareApiGatewayElbSgId'
  # ApplePayElbSgId:
  #   Description: ApplePayElb security group
  #   Value: !Ref ApplePayElbSg
  #   Export:
  #     Name: !Sub '${AWS::StackName}-ApplePayElbSgId'
  # ApplePayEc2SgId:
  #   Description: ApplePayEc2 security group
  #   Value: !Ref ApplePayEc2Sg
  #   Export:
  #     Name: !Sub '${AWS::StackName}-ApplePayEc2SgId'
  # CyberSourceElbSgId:
  #   Description: CyberSourceElb security group
  #   Value: !Ref CyberSourceElbSg
  #   Export:
  #     Name: !Sub '${AWS::StackName}-CyberSourceElbSgId'
  # CyberSourceEc2SgId:
  #   Description: CyberSourceEc2 security group
  #   Value: !Ref CyberSourceEc2Sg
  #   Export:
  #     Name: !Sub '${AWS::StackName}-CyberSourceEc2SgId'
  # DemandWareElbSgId:
  #   Description: DemandWareElb security group
  #   Value: !Ref DemandWareElbSg
  #   Export:
  #     Name: !Sub '${AWS::StackName}-DemandWareElbSgId'
  # DemandWareEc2SgId:
  #   Description: DemandWareEc2 security group
  #   Value: !Ref DemandWareEc2Sg
  #   Export:
  #     Name: !Sub '${AWS::StackName}-DemandWareEc2SgId'
  GrafanaSgId:
    Description: Grafana Security Group
    Value: !Ref InternalGrafanaVpcSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-GrafanaSgId'
  RedisSgId:
    Description: Redis Security Group
    Value: !Ref RedisSg
    Export:
      Name: !Sub '${AWS::StackName}-RedisSgId'
  Puppet:
    Description: Puppet Security Group
    Value: !Ref PuppetSg
    Export:
      Name: !Sub '${AWS::StackName}-PuppetSg'
  # DashboardSgId:
  #   Description: Dashboard Security Group
  #   Value: !Ref InternalDashboardVpcSecurityGroup
  #   Export:
  #     Name: !Sub '${AWS::StackName}-DashboardSgId'
  MciLogsBucketName:
    Description: BeansTalk logs
    Value: !Ref MciLogsBucket
    Export:
      Name: !Sub '${AWS::StackName}-MciLogsBucket'



      